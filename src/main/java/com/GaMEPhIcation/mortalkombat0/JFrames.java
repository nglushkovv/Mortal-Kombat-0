package com.GaMEPhIcation.mortalkombat0;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */



import com.GaMEPhIcation.mortalkombat0.characters.Fighter;
import com.GaMEPhIcation.mortalkombat0.characters.Fighter.Fighters;
import static com.GaMEPhIcation.mortalkombat0.characters.Fighter.Type.WIZARD;
import com.GaMEPhIcation.mortalkombat0.mechanics.*;
import com.GaMEPhIcation.mortalkombat0.mechanics.Fight.Action;
import java.awt.Color;
import java.awt.Font;
import java.io.IOException;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Мария
 */
public class JFrames extends javax.swing.JFrame {
    private Game game;
    private Player player;
    private Fighter enemy;
    
    

    
    /**
     * Creates new form JFrame
     */
    public JFrames() {
        initComponents();
        configureComponents();
        game = new Game();
        
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException | IllegalAccessException | 
                InstantiationException | UnsupportedLookAndFeelException e) {
        }
        
        try {
           
        } catch (Exception ex) {
           
        }
        
        btnGroup.add(smallHealRadioButton);
        btnGroup.add(largeHealRadioButton);
        btnGroup.add(reviveRadioButton);
        
        
    }
    
    private void configureComponents() {
        configureWindow();
        configureLabels();
        configureButtons();
        configureDialogs();
    }
    
    private void configureDialogs() {
        chooseFighterDialog.setSize(600,400);
        chooseFighterDialog.setLocationRelativeTo(null);
        chooseFighterDialog.setUndecorated(true);
        chooseFighterDialog.setAlwaysOnTop(true);
        
        nextLevelDialog.setSize(478, 361);
        nextLevelDialog.setLocationRelativeTo(null);
        nextLevelDialog.setAlwaysOnTop(true);
        nextLevelDialog.setUndecorated(true);
        
        inventoryDialog.setLocationRelativeTo(this);
        inventoryDialog.setSize(518, 260);
        inventoryDialog.setAlwaysOnTop(true);
        inventoryDialog.setUndecorated(true);
        
        loseDialog.setSize(400, 210);
        loseDialog.setLocationRelativeTo(null);
        loseDialog.setAlwaysOnTop(true);
        loseDialog.setUndecorated(true);
       
        congratulationsDialog.setLocationRelativeTo(null);
        congratulationsDialog.setSize(500, 370);
        
        winnersTableDialog.setLocationRelativeTo(null);
        winnersTableDialog.setSize(580, 406);
        
        
        
        
    }
    
    private void configureLabels() {
        URL inputStream = this.getClass().getResource("/backgrounds/main_menu.gif");
        ImageIcon logoImage = new ImageIcon(inputStream);
        mainMenuBackground.setIcon(logoImage);
        

    }
    
    private void configureButtons() {
        startNewGameBtn.setContentAreaFilled(false);
        startNewGameBtn.setBorderPainted(false);
        showResultTableBtn.setContentAreaFilled(false);
        showResultTableBtn.setBorderPainted(false);
        
        weakBtn.setVisible(false);
    }
    
    private void configureWindow(){
        ImageIcon icon = new ImageIcon(this.getClass().getResource("/backgrounds/logo.png"));
        this.setIconImage(icon.getImage());
        mainFrame.setSize(1070,630);
        mainFrame.setTitle("Mortal Kombat 0");
        mainFrame.setIconImage(icon.getImage());
        winnersTableDialog.setIconImage(icon.getImage());
        congratulationsDialog.setIconImage(icon.getImage());
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainFrame = new javax.swing.JFrame();
        enemyIcon = new javax.swing.JLabel();
        playerIcon = new javax.swing.JLabel();
        levelLbl = new javax.swing.JLabel();
        stageLbl = new javax.swing.JLabel();
        hpPlayerLbl = new javax.swing.JLabel();
        hpEnemyLbl = new javax.swing.JLabel();
        enemyName = new javax.swing.JLabel();
        heroName = new javax.swing.JLabel();
        expPlayerLabel = new javax.swing.JLabel();
        moveLabel = new javax.swing.JLabel();
        turnLabel = new javax.swing.JLabel();
        turnInfo = new javax.swing.JLabel();
        enemyHPBar = new javax.swing.JProgressBar();
        enemyHPBarBackground = new javax.swing.JProgressBar();
        playerHPBar = new javax.swing.JProgressBar();
        playerHPBarBackground = new javax.swing.JProgressBar();
        enemyLevel = new javax.swing.JLabel();
        heroLevel = new javax.swing.JLabel();
        fightLabel = new javax.swing.JLabel();
        pointsLabel = new javax.swing.JLabel();
        weakBtn = new javax.swing.JButton();
        inventoryBtn = new javax.swing.JButton();
        defendBtn = new javax.swing.JButton();
        atackBtn = new javax.swing.JButton();
        backgroundLabel = new javax.swing.JLabel();
        nextLevelDialog = new javax.swing.JDialog();
        increaseMaxHealthBtn = new javax.swing.JButton();
        increaseAttackBtn = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        reachedNewLevelLbl = new javax.swing.JLabel();
        youWinDLbl = new javax.swing.JLabel();
        nextDialogBackground = new javax.swing.JLabel();
        congratulationsDialog = new javax.swing.JDialog();
        endGameBtn = new javax.swing.JButton();
        congratsTitle = new javax.swing.JLabel();
        writeNameTextfield = new javax.swing.JTextField();
        writeNameLabel = new javax.swing.JLabel();
        resultToTableLabel = new javax.swing.JLabel();
        congratulationsBackground = new javax.swing.JLabel();
        winnersTableDialog = new javax.swing.JDialog();
        closeTableBtn = new javax.swing.JButton();
        winnersTableLabel1 = new javax.swing.JLabel();
        winnersTableScrollPane = new javax.swing.JScrollPane();
        winnersTable = new javax.swing.JTable(){
            public boolean isCellEditable(int row, int column) {
                return false;
            };
        };
        tableBackground = new javax.swing.JLabel();
        inventoryDialog = new javax.swing.JDialog();
        useBtn = new javax.swing.JButton();
        reviveRadioButton = new javax.swing.JRadioButton();
        largeHealRadioButton = new javax.swing.JRadioButton();
        smallHealRadioButton = new javax.swing.JRadioButton();
        backToFightBtn = new javax.swing.JButton();
        inventoryLabel = new javax.swing.JLabel();
        inventoryBackground = new javax.swing.JLabel();
        btnGroup = new javax.swing.ButtonGroup();
        loseDialog = new javax.swing.JDialog();
        loseGameBtn = new javax.swing.JButton();
        reviveBtn = new javax.swing.JButton();
        deadLbl = new javax.swing.JLabel();
        loseBackgroundLbl = new javax.swing.JLabel();
        chooseFighterDialog = new javax.swing.JDialog();
        backToMenuBtn = new javax.swing.JButton();
        locationsNumber = new javax.swing.JLabel();
        liuLbl = new javax.swing.JLabel();
        shaoLbl = new javax.swing.JLabel();
        barakaLbl = new javax.swing.JLabel();
        subLbl = new javax.swing.JLabel();
        sonyaLbl = new javax.swing.JLabel();
        dwnBtn = new javax.swing.JButton();
        upBtn = new javax.swing.JButton();
        chooseTitleLabel = new javax.swing.JLabel();
        chooseBackground = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        showResultTableBtn = new javax.swing.JButton();
        startNewGameBtn = new javax.swing.JButton();
        mainMenuBackground = new javax.swing.JLabel();

        mainFrame.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        enemyIcon.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        enemyIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/characters/sub_zero/flipped/stay.gif"))); // NOI18N
        enemyIcon.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        mainFrame.getContentPane().add(enemyIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 220, 300, 380));

        playerIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/characters/sonya_blade/stay.gif"))); // NOI18N
        playerIcon.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        mainFrame.getContentPane().add(playerIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 220, 300, 380));

        levelLbl.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        levelLbl.setForeground(new java.awt.Color(255, 255, 255));
        levelLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        levelLbl.setText("Level:");
        mainFrame.getContentPane().add(levelLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 80, 20));

        stageLbl.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        stageLbl.setForeground(new java.awt.Color(255, 255, 255));
        stageLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        stageLbl.setText("Stage:");
        mainFrame.getContentPane().add(stageLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 80, 30));

        hpPlayerLbl.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        hpPlayerLbl.setForeground(new java.awt.Color(255, 255, 255));
        hpPlayerLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        hpPlayerLbl.setText("HP: ");
        mainFrame.getContentPane().add(hpPlayerLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 80, 30));

        hpEnemyLbl.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        hpEnemyLbl.setForeground(new java.awt.Color(255, 255, 255));
        hpEnemyLbl.setText("HP: ");
        mainFrame.getContentPane().add(hpEnemyLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 40, 120, 30));

        enemyName.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        enemyName.setForeground(new java.awt.Color(255, 255, 255));
        enemyName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        enemyName.setText("jLabel1");
        mainFrame.getContentPane().add(enemyName, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 10, 260, -1));

        heroName.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        heroName.setForeground(new java.awt.Color(255, 255, 255));
        heroName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        heroName.setText("jLabel1");
        mainFrame.getContentPane().add(heroName, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 260, -1));

        expPlayerLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        expPlayerLabel.setForeground(new java.awt.Color(255, 255, 255));
        expPlayerLabel.setText("EX: ");
        mainFrame.getContentPane().add(expPlayerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 70, -1));

        moveLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        moveLabel.setForeground(new java.awt.Color(255, 255, 255));
        moveLabel.setText("Move: 1");
        mainFrame.getContentPane().add(moveLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, -1, 20));

        turnLabel.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        turnLabel.setForeground(new java.awt.Color(255, 255, 255));
        turnLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        turnLabel.setText("УДАЧИ!");
        mainFrame.getContentPane().add(turnLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 140, 880, -1));

        turnInfo.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        turnInfo.setForeground(new java.awt.Color(255, 255, 255));
        turnInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        turnInfo.setText("ВАШ ХОД");
        mainFrame.getContentPane().add(turnInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 110, 230, -1));

        enemyHPBar.setBackground(new java.awt.Color(51, 102, 0));
        enemyHPBar.setForeground(new java.awt.Color(102, 0, 0));
        enemyHPBar.setValue(100);
        enemyHPBar.setBorderPainted(false);
        enemyHPBar.setFocusable(false);
        enemyHPBar.setOpaque(false);
        mainFrame.getContentPane().add(enemyHPBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 20, 260, 20));

        enemyHPBarBackground.setBackground(new java.awt.Color(51, 102, 0));
        enemyHPBarBackground.setForeground(new java.awt.Color(51, 0, 0));
        enemyHPBarBackground.setValue(100);
        enemyHPBarBackground.setBorderPainted(false);
        enemyHPBarBackground.setFocusable(false);
        enemyHPBarBackground.setOpaque(false);
        mainFrame.getContentPane().add(enemyHPBarBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 20, 260, 20));

        playerHPBar.setBackground(new java.awt.Color(51, 102, 0));
        playerHPBar.setForeground(new java.awt.Color(102, 0, 0));
        playerHPBar.setValue(100);
        playerHPBar.setBorderPainted(false);
        playerHPBar.setFocusable(false);
        playerHPBar.setOpaque(false);
        mainFrame.getContentPane().add(playerHPBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 260, 20));

        playerHPBarBackground.setBackground(new java.awt.Color(51, 102, 0));
        playerHPBarBackground.setForeground(new java.awt.Color(51, 0, 0));
        playerHPBarBackground.setValue(100);
        playerHPBarBackground.setBorderPainted(false);
        playerHPBarBackground.setFocusable(false);
        playerHPBarBackground.setOpaque(false);
        mainFrame.getContentPane().add(playerHPBarBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 260, 20));

        enemyLevel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        enemyLevel.setForeground(new java.awt.Color(255, 255, 255));
        enemyLevel.setText("LVL: ");
        mainFrame.getContentPane().add(enemyLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 70, 70, -1));

        heroLevel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        heroLevel.setForeground(new java.awt.Color(255, 255, 255));
        heroLevel.setText("LVL: ");
        mainFrame.getContentPane().add(heroLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 70, -1));

        fightLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fightLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/fight.gif"))); // NOI18N
        mainFrame.getContentPane().add(fightLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 0, 370, 100));

        pointsLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        pointsLabel.setForeground(new java.awt.Color(255, 255, 255));
        pointsLabel.setText("POINTS: ");
        mainFrame.getContentPane().add(pointsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        weakBtn.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        weakBtn.setText("Ослабление");
        weakBtn.setBorderPainted(false);
        weakBtn.setContentAreaFilled(false);
        weakBtn.setFocusPainted(false);
        weakBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                weakBtnMouseMoved(evt);
            }
        });
        weakBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weakBtnActionPerformed(evt);
            }
        });
        mainFrame.getContentPane().add(weakBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, -1, 40));

        inventoryBtn.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        inventoryBtn.setText("Инвентарь");
        inventoryBtn.setBorderPainted(false);
        inventoryBtn.setContentAreaFilled(false);
        inventoryBtn.setFocusPainted(false);
        inventoryBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                inventoryBtnMouseMoved(evt);
            }
        });
        inventoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryBtnActionPerformed(evt);
            }
        });
        mainFrame.getContentPane().add(inventoryBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 520, -1, 40));

        defendBtn.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        defendBtn.setText("Защита");
        defendBtn.setBorderPainted(false);
        defendBtn.setContentAreaFilled(false);
        defendBtn.setFocusPainted(false);
        defendBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                defendBtnMouseMoved(evt);
            }
        });
        defendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defendBtnActionPerformed(evt);
            }
        });
        mainFrame.getContentPane().add(defendBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 480, -1, 40));

        atackBtn.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        atackBtn.setText("Атака");
        atackBtn.setBorderPainted(false);
        atackBtn.setContentAreaFilled(false);
        atackBtn.setFocusPainted(false);
        atackBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                atackBtnMouseMoved(evt);
            }
        });
        atackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atackBtnActionPerformed(evt);
            }
        });
        mainFrame.getContentPane().add(atackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, -1, 40));

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/background0.gif"))); // NOI18N
        backgroundLabel.setText("jLabel1");
        backgroundLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                backgroundLabelMouseMoved(evt);
            }
        });
        mainFrame.getContentPane().add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(-220, -110, 1290, 710));

        nextLevelDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        increaseMaxHealthBtn.setBackground(new java.awt.Color(255, 255, 255));
        increaseMaxHealthBtn.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        increaseMaxHealthBtn.setForeground(new java.awt.Color(255, 255, 255));
        increaseMaxHealthBtn.setText("Увеличить здоровье");
        increaseMaxHealthBtn.setBorderPainted(false);
        increaseMaxHealthBtn.setContentAreaFilled(false);
        increaseMaxHealthBtn.setFocusPainted(false);
        increaseMaxHealthBtn.setFocusable(false);
        increaseMaxHealthBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                increaseMaxHealthBtnMouseMoved(evt);
            }
        });
        increaseMaxHealthBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseMaxHealthBtnActionPerformed(evt);
            }
        });
        nextLevelDialog.getContentPane().add(increaseMaxHealthBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 210, 230, 50));

        increaseAttackBtn.setBackground(new java.awt.Color(255, 255, 255));
        increaseAttackBtn.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        increaseAttackBtn.setForeground(new java.awt.Color(255, 255, 255));
        increaseAttackBtn.setText("Увеличить урон");
        increaseAttackBtn.setBorderPainted(false);
        increaseAttackBtn.setContentAreaFilled(false);
        increaseAttackBtn.setFocusPainted(false);
        increaseAttackBtn.setFocusable(false);
        increaseAttackBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                increaseAttackBtnMouseMoved(evt);
            }
        });
        increaseAttackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseAttackBtnActionPerformed(evt);
            }
        });
        nextLevelDialog.getContentPane().add(increaseAttackBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 200, 50));

        nextButton.setBackground(new java.awt.Color(255, 255, 255));
        nextButton.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        nextButton.setForeground(new java.awt.Color(255, 255, 255));
        nextButton.setText("Дальше");
        nextButton.setBorderPainted(false);
        nextButton.setContentAreaFilled(false);
        nextButton.setFocusPainted(false);
        nextButton.setFocusable(false);
        nextButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                nextButtonMouseMoved(evt);
            }
        });
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        nextLevelDialog.getContentPane().add(nextButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 270, 120, 30));

        reachedNewLevelLbl.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        reachedNewLevelLbl.setForeground(new java.awt.Color(255, 255, 255));
        reachedNewLevelLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        reachedNewLevelLbl.setText("YOU'VE REACHED A NEW LEVEL!");
        nextLevelDialog.getContentPane().add(reachedNewLevelLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, 290, -1));

        youWinDLbl.setBackground(new java.awt.Color(204, 204, 204));
        youWinDLbl.setFont(new java.awt.Font("Consolas", 1, 48)); // NOI18N
        youWinDLbl.setForeground(new java.awt.Color(255, 255, 255));
        youWinDLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        youWinDLbl.setText("Победа");
        youWinDLbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nextLevelDialog.getContentPane().add(youWinDLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 120, 160, 50));

        nextDialogBackground.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nextDialogBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/nextLevelBackground.jpg"))); // NOI18N
        nextDialogBackground.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                nextDialogBackgroundMouseMoved(evt);
            }
        });
        nextLevelDialog.getContentPane().add(nextDialogBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(-120, -330, 850, 700));

        congratulationsDialog.setTitle("Введите никнейм");
        congratulationsDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        endGameBtn.setBackground(new java.awt.Color(255, 255, 255));
        endGameBtn.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        endGameBtn.setForeground(new java.awt.Color(255, 255, 255));
        endGameBtn.setText("Закончить игру");
        endGameBtn.setBorderPainted(false);
        endGameBtn.setContentAreaFilled(false);
        endGameBtn.setFocusPainted(false);
        endGameBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                endGameBtnMouseMoved(evt);
            }
        });
        endGameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endGameBtnActionPerformed(evt);
            }
        });
        congratulationsDialog.getContentPane().add(endGameBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 270, 250, 38));

        congratsTitle.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        congratsTitle.setForeground(new java.awt.Color(255, 255, 255));
        congratsTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        congratsTitle.setText("Победа на вашей стороне");
        congratsTitle.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                congratsTitleMouseMoved(evt);
            }
        });
        congratulationsDialog.getContentPane().add(congratsTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, 363, 81));

        writeNameTextfield.setBackground(new java.awt.Color(255, 255, 255));
        writeNameTextfield.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        writeNameTextfield.setForeground(new java.awt.Color(0, 0, 0));
        writeNameTextfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        writeNameTextfield.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                writeNameTextfieldMouseMoved(evt);
            }
        });
        writeNameTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeNameTextfieldActionPerformed(evt);
            }
        });
        congratulationsDialog.getContentPane().add(writeNameTextfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 200, 350, 30));

        writeNameLabel.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        writeNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        writeNameLabel.setText("Введите имя своего персонажа для добавления");
        writeNameLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                writeNameLabelMouseMoved(evt);
            }
        });
        congratulationsDialog.getContentPane().add(writeNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, -1, 38));

        resultToTableLabel.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        resultToTableLabel.setForeground(new java.awt.Color(255, 255, 255));
        resultToTableLabel.setText("результата в таблицу рекордов");
        resultToTableLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                resultToTableLabelMouseMoved(evt);
            }
        });
        congratulationsDialog.getContentPane().add(resultToTableLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 170, -1, -1));

        congratulationsBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/nextLevelBackground.jpg"))); // NOI18N
        congratulationsBackground.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                congratulationsBackgroundMouseMoved(evt);
            }
        });
        congratulationsDialog.getContentPane().add(congratulationsBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 370));

        winnersTableDialog.setTitle("Таблица рекордов");
        winnersTableDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        closeTableBtn.setBackground(new java.awt.Color(255, 255, 255));
        closeTableBtn.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        closeTableBtn.setForeground(new java.awt.Color(255, 255, 255));
        closeTableBtn.setText("Закрыть");
        closeTableBtn.setBorderPainted(false);
        closeTableBtn.setContentAreaFilled(false);
        closeTableBtn.setFocusPainted(false);
        closeTableBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                closeTableBtnMouseMoved(evt);
            }
        });
        closeTableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeTableBtnActionPerformed(evt);
            }
        });
        winnersTableDialog.getContentPane().add(closeTableBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 330, 200, 38));

        winnersTableLabel1.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        winnersTableLabel1.setForeground(new java.awt.Color(255, 255, 255));
        winnersTableLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        winnersTableLabel1.setText("Таблица рекордов");
        winnersTableDialog.getContentPane().add(winnersTableLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 10, 241, 43));

        winnersTable.setForeground(new java.awt.Color(0, 0, 0));
        winnersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Имя", "Количество баллов"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        winnersTableScrollPane.setViewportView(winnersTable);

        winnersTableDialog.getContentPane().add(winnersTableScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 59, 527, 262));

        tableBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/nextLevelBackground.jpg"))); // NOI18N
        tableBackground.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                tableBackgroundMouseMoved(evt);
            }
        });
        winnersTableDialog.getContentPane().add(tableBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 620, 460));

        inventoryDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        useBtn.setBackground(new java.awt.Color(255, 255, 255));
        useBtn.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        useBtn.setForeground(new java.awt.Color(255, 255, 255));
        useBtn.setText("Использовать");
        useBtn.setBorderPainted(false);
        useBtn.setContentAreaFilled(false);
        useBtn.setFocusPainted(false);
        useBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        useBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                useBtnMouseMoved(evt);
            }
        });
        useBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useBtnActionPerformed(evt);
            }
        });
        inventoryDialog.getContentPane().add(useBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 210, 38));

        reviveRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        btnGroup.add(reviveRadioButton);
        reviveRadioButton.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        reviveRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        reviveRadioButton.setText("Крест возрождения, 0 шт");
        reviveRadioButton.setActionCommand("");
        reviveRadioButton.setContentAreaFilled(false);
        reviveRadioButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        reviveRadioButton.setFocusPainted(false);
        reviveRadioButton.setFocusable(false);
        reviveRadioButton.setRequestFocusEnabled(false);
        reviveRadioButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                reviveRadioButtonMouseMoved(evt);
            }
        });
        reviveRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reviveRadioButtonMouseClicked(evt);
            }
        });
        inventoryDialog.getContentPane().add(reviveRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        largeHealRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        btnGroup.add(largeHealRadioButton);
        largeHealRadioButton.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        largeHealRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        largeHealRadioButton.setText("Большое зелье лечение, 0 шт");
        largeHealRadioButton.setActionCommand("");
        largeHealRadioButton.setContentAreaFilled(false);
        largeHealRadioButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        largeHealRadioButton.setFocusPainted(false);
        largeHealRadioButton.setFocusable(false);
        largeHealRadioButton.setRequestFocusEnabled(false);
        largeHealRadioButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                largeHealRadioButtonMouseMoved(evt);
            }
        });
        largeHealRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                largeHealRadioButtonMouseClicked(evt);
            }
        });
        largeHealRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                largeHealRadioButtonActionPerformed(evt);
            }
        });
        inventoryDialog.getContentPane().add(largeHealRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        smallHealRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        btnGroup.add(smallHealRadioButton);
        smallHealRadioButton.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        smallHealRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        smallHealRadioButton.setText("Малое зелье лечение, 0 шт");
        smallHealRadioButton.setActionCommand("");
        smallHealRadioButton.setContentAreaFilled(false);
        smallHealRadioButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        smallHealRadioButton.setFocusPainted(false);
        smallHealRadioButton.setFocusable(false);
        smallHealRadioButton.setRequestFocusEnabled(false);
        smallHealRadioButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                smallHealRadioButtonMouseMoved(evt);
            }
        });
        smallHealRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                smallHealRadioButtonMouseClicked(evt);
            }
        });
        smallHealRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smallHealRadioButtonActionPerformed(evt);
            }
        });
        inventoryDialog.getContentPane().add(smallHealRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        backToFightBtn.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        backToFightBtn.setForeground(new java.awt.Color(255, 255, 255));
        backToFightBtn.setText("Назад");
        backToFightBtn.setBorderPainted(false);
        backToFightBtn.setContentAreaFilled(false);
        backToFightBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                backToFightBtnMouseMoved(evt);
            }
        });
        backToFightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToFightBtnActionPerformed(evt);
            }
        });
        inventoryDialog.getContentPane().add(backToFightBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 190, 110, 40));

        inventoryLabel.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        inventoryLabel.setForeground(new java.awt.Color(255, 255, 255));
        inventoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        inventoryLabel.setText("Мешок предметов");
        inventoryDialog.getContentPane().add(inventoryLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 330, 47));

        inventoryBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/nextLevelBackground.jpg"))); // NOI18N
        inventoryBackground.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                inventoryBackgroundMouseMoved(evt);
            }
        });
        inventoryDialog.getContentPane().add(inventoryBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(-2, 0, 520, 260));

        loseDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        loseGameBtn.setBackground(new java.awt.Color(255, 255, 255));
        loseGameBtn.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        loseGameBtn.setForeground(new java.awt.Color(255, 255, 255));
        loseGameBtn.setText("Закончить игру");
        loseGameBtn.setBorderPainted(false);
        loseGameBtn.setContentAreaFilled(false);
        loseGameBtn.setFocusPainted(false);
        loseGameBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                loseGameBtnMouseMoved(evt);
            }
        });
        loseGameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loseGameBtnActionPerformed(evt);
            }
        });
        loseDialog.getContentPane().add(loseGameBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 120, 250, 38));

        reviveBtn.setBackground(new java.awt.Color(255, 255, 255));
        reviveBtn.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        reviveBtn.setForeground(new java.awt.Color(255, 255, 255));
        reviveBtn.setText("Использовать крест возрождения");
        reviveBtn.setBorderPainted(false);
        reviveBtn.setContentAreaFilled(false);
        reviveBtn.setFocusPainted(false);
        reviveBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                reviveBtnMouseMoved(evt);
            }
        });
        reviveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reviveBtnActionPerformed(evt);
            }
        });
        loseDialog.getContentPane().add(reviveBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 380, 38));

        deadLbl.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        deadLbl.setForeground(new java.awt.Color(255, 255, 255));
        deadLbl.setText("Вы мертвы.");
        loseDialog.getContentPane().add(deadLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 210, 60));

        loseBackgroundLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/nextLevelBackground.jpg"))); // NOI18N
        loseBackgroundLbl.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                loseBackgroundLblMouseMoved(evt);
            }
        });
        loseDialog.getContentPane().add(loseBackgroundLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 401, 210));

        chooseFighterDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backToMenuBtn.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        backToMenuBtn.setForeground(new java.awt.Color(255, 255, 255));
        backToMenuBtn.setText("Назад");
        backToMenuBtn.setBorderPainted(false);
        backToMenuBtn.setContentAreaFilled(false);
        backToMenuBtn.setFocusable(false);
        backToMenuBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                backToMenuBtnMouseMoved(evt);
            }
        });
        backToMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToMenuBtnActionPerformed(evt);
            }
        });
        chooseFighterDialog.getContentPane().add(backToMenuBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, -1, -1));

        locationsNumber.setFont(new java.awt.Font("Consolas", 0, 36)); // NOI18N
        locationsNumber.setForeground(new java.awt.Color(255, 255, 255));
        locationsNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        locationsNumber.setText("1");
        chooseFighterDialog.getContentPane().add(locationsNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 270, 80, -1));

        liuLbl.setBackground(new java.awt.Color(153, 153, 153));
        liuLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        liuLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/characters/liu_kang/liukang0.png"))); // NOI18N
        liuLbl.setText("sub");
        liuLbl.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        liuLbl.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                liuLblMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                liuLblMouseMoved(evt);
            }
        });
        liuLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                liuLblMouseClicked(evt);
            }
        });
        chooseFighterDialog.getContentPane().add(liuLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 210, 80, 120));

        shaoLbl.setBackground(new java.awt.Color(153, 153, 153));
        shaoLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        shaoLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/characters/shao_kahn/shao0.png"))); // NOI18N
        shaoLbl.setText("sub");
        shaoLbl.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                shaoLblMouseMoved(evt);
            }
        });
        shaoLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                shaoLblMouseClicked(evt);
            }
        });
        chooseFighterDialog.getContentPane().add(shaoLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 70, 150, 140));

        barakaLbl.setBackground(new java.awt.Color(153, 153, 153));
        barakaLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        barakaLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/characters/baraka/baraka0.png"))); // NOI18N
        barakaLbl.setText("sub");
        barakaLbl.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                barakaLblMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                barakaLblMouseMoved(evt);
            }
        });
        barakaLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                barakaLblMouseClicked(evt);
            }
        });
        chooseFighterDialog.getContentPane().add(barakaLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 210, 80, 120));

        subLbl.setBackground(new java.awt.Color(153, 153, 153));
        subLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/characters/sub_zero/subzero0.png"))); // NOI18N
        subLbl.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                subLblMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                subLblMouseMoved(evt);
            }
        });
        subLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subLblMouseClicked(evt);
            }
        });
        chooseFighterDialog.getContentPane().add(subLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 60, 120, 160));

        sonyaLbl.setBackground(new java.awt.Color(153, 153, 153));
        sonyaLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        sonyaLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/characters/sonya_blade/sonya0.png"))); // NOI18N
        sonyaLbl.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sonyaLblMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                sonyaLblMouseMoved(evt);
            }
        });
        sonyaLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sonyaLblMouseClicked(evt);
            }
        });
        chooseFighterDialog.getContentPane().add(sonyaLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 110, 140));

        dwnBtn.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        dwnBtn.setForeground(new java.awt.Color(255, 255, 255));
        dwnBtn.setText("▼");
        dwnBtn.setBorderPainted(false);
        dwnBtn.setContentAreaFilled(false);
        dwnBtn.setFocusPainted(false);
        dwnBtn.setFocusable(false);
        dwnBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                dwnBtnMouseMoved(evt);
            }
        });
        dwnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dwnBtnActionPerformed(evt);
            }
        });
        chooseFighterDialog.getContentPane().add(dwnBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 290, 60, 60));

        upBtn.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        upBtn.setForeground(new java.awt.Color(255, 255, 255));
        upBtn.setText("▲");
        upBtn.setBorderPainted(false);
        upBtn.setContentAreaFilled(false);
        upBtn.setFocusPainted(false);
        upBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                upBtnMouseMoved(evt);
            }
        });
        upBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upBtnActionPerformed(evt);
            }
        });
        chooseFighterDialog.getContentPane().add(upBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 220, 60, 60));

        chooseTitleLabel.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        chooseTitleLabel.setForeground(new java.awt.Color(255, 255, 255));
        chooseTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        chooseTitleLabel.setText("CHOOSE YOUR FIGHTER");
        chooseFighterDialog.getContentPane().add(chooseTitleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 250, 40));

        chooseBackground.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        chooseBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/back.jpg"))); // NOI18N
        chooseBackground.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        chooseBackground.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                chooseBackgroundMouseMoved(evt);
            }
        });
        chooseFighterDialog.getContentPane().add(chooseBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 560));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titleLabel.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setText("Mortal Kombat 0");
        getContentPane().add(titleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 350, 60));

        showResultTableBtn.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        showResultTableBtn.setForeground(new java.awt.Color(255, 255, 255));
        showResultTableBtn.setText("Таблица результатов ");
        showResultTableBtn.setActionCommand("Таблица результатов");
        showResultTableBtn.setFocusPainted(false);
        showResultTableBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        showResultTableBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        showResultTableBtn.setOpaque(false);
        showResultTableBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                mouseMovedListener(evt);
            }
        });
        showResultTableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showResultTableBtnActionPerformed(evt);
            }
        });
        getContentPane().add(showResultTableBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 240, 20));

        startNewGameBtn.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        startNewGameBtn.setForeground(new java.awt.Color(255, 255, 255));
        startNewGameBtn.setText("Начать новую игру");
        startNewGameBtn.setFocusPainted(false);
        startNewGameBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        startNewGameBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startNewGameBtn.setOpaque(false);
        startNewGameBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                startNewGameBtnMouseMoved(evt);
            }
        });
        startNewGameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startNewGameBtnActionPerformed(evt);
            }
        });
        getContentPane().add(startNewGameBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 210, 20));

        mainMenuBackground.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainMenuBackground.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                mainPaneMouseMoved(evt);
            }
        });
        getContentPane().add(mainMenuBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 560, 270));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void smallHealRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smallHealRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_smallHealRadioButtonActionPerformed

    private void largeHealRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_largeHealRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_largeHealRadioButtonActionPerformed

    private void useBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useBtnActionPerformed
        if(player.getFighter().getState() == Action.STUNNED) {
            String roundInfo = game.getMoveManager().manageMoves(Action.STUNNED);
            completeRound(roundInfo, Action.STUNNED);
            player.getFighter().setState(Action.INVENTORY);
        } else{
            String roundInfo = null;
            if(smallHealRadioButton.isSelected() && player.getFighter().getBag()[0].isAvailable()){
                roundInfo = game.getMoveManager().manageUsingItem(0);
            } else if (largeHealRadioButton.isSelected() && player.getFighter().getBag()[1].isAvailable()) {
                roundInfo = game.getMoveManager().manageUsingItem(1);
            } else if (reviveRadioButton.isSelected() && player.getFighter().getBag()[2].isAvailable()){
                roundInfo = game.getMoveManager().manageUsingItem(2);
            }
            inventoryDialog.setVisible(false);
            
            completeRound(roundInfo, Action.INVENTORY);
            Item[] bag = player.getFighter().getBag();
            smallHealRadioButton.setText("Малое зелье лечения, " + bag[0].getCount() + " шт");
            largeHealRadioButton.setText("Большое зелье лечения, " + bag[1].getCount() + " шт");
            reviveRadioButton.setText("Крест возрождения, " + bag[2].getCount() + " шт");
            
        }
    }//GEN-LAST:event_useBtnActionPerformed

    private void showResultTableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showResultTableBtnActionPerformed
        game.getExcelWorker().WriteToTable((DefaultTableModel) winnersTable.getModel());
        winnersTableDialog.setVisible(true);
    }//GEN-LAST:event_showResultTableBtnActionPerformed

    private void startNewGameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startNewGameBtnActionPerformed

        chooseFighterDialog.setVisible(true);
        

        
    }//GEN-LAST:event_startNewGameBtnActionPerformed

    private void mouseMovedListener(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseMovedListener
        showResultTableBtn.setForeground(new Color(153,153,153));
    }//GEN-LAST:event_mouseMovedListener

    private void mainPaneMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainPaneMouseMoved
        showResultTableBtn.setForeground(Color.white);
        startNewGameBtn.setForeground(Color.white);
    }//GEN-LAST:event_mainPaneMouseMoved

    private void startNewGameBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startNewGameBtnMouseMoved
        startNewGameBtn.setForeground(new Color(153,153,153));
    }//GEN-LAST:event_startNewGameBtnMouseMoved

    private void atackBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_atackBtnMouseMoved
        if(atackBtn.isEnabled()){
            weakBtn.setForeground(Color.white);
            atackBtn.setForeground(new Color(100,100,100));
            defendBtn.setForeground(Color.white);
            inventoryBtn.setForeground(Color.white);}
            
    }//GEN-LAST:event_atackBtnMouseMoved

    private void defendBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_defendBtnMouseMoved
        if(atackBtn.isEnabled()){
            defendBtn.setForeground(new Color(100,100,100));
            atackBtn.setForeground(Color.white);
            inventoryBtn.setForeground(Color.white);
            weakBtn.setForeground(Color.white);}
    }//GEN-LAST:event_defendBtnMouseMoved

    private void inventoryBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryBtnMouseMoved
        if(inventoryBtn.isEnabled()){
            inventoryBtn.setForeground(new Color(100,100,100));
            atackBtn.setForeground(Color.white);
            defendBtn.setForeground(Color.white);
            weakBtn.setForeground(Color.white);}
    }//GEN-LAST:event_inventoryBtnMouseMoved

    private void backgroundLabelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backgroundLabelMouseMoved
        if(atackBtn.isEnabled()){
            weakBtn.setForeground(Color.white);
            atackBtn.setForeground(Color.white);
            defendBtn.setForeground(Color.white);
            inventoryBtn.setForeground(Color.white);
            
    }
        
    }//GEN-LAST:event_backgroundLabelMouseMoved

    private void sonyaLblMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sonyaLblMouseMoved
        URL inputStream = this.getClass().getResource("/characters/sonya_blade/sonya1.png");
        ImageIcon image = new ImageIcon(inputStream);
        sonyaLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/sub_zero/subzero0.png");
        image = new ImageIcon(inputStream);
        subLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/liu_kang/liukang0.png");
        image = new ImageIcon(inputStream);
        liuLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/shao_kahn/shao0.png");
        image = new ImageIcon(inputStream);
        shaoLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/baraka/baraka0.png");
        image = new ImageIcon(inputStream);
        barakaLbl.setIcon(image);
        
        
    }//GEN-LAST:event_sonyaLblMouseMoved

    private void shaoLblMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shaoLblMouseMoved
        URL inputStream = this.getClass().getResource("/characters/sonya_blade/sonya0.png");
        ImageIcon image = new ImageIcon(inputStream);
        sonyaLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/sub_zero/subzero0.png");
        image = new ImageIcon(inputStream);
        subLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/liu_kang/liukang0.png");
        image = new ImageIcon(inputStream);
        liuLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/shao_kahn/shao1.png");
        image = new ImageIcon(inputStream);
        shaoLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/baraka/baraka0.png");
        image = new ImageIcon(inputStream);
        barakaLbl.setIcon(image);
    }//GEN-LAST:event_shaoLblMouseMoved

    private void subLblMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subLblMouseMoved
        URL inputStream = this.getClass().getResource("/characters/sonya_blade/sonya0.png");
        ImageIcon image = new ImageIcon(inputStream);
        sonyaLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/sub_zero/subzero1.png");
        image = new ImageIcon(inputStream);
        subLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/liu_kang/liukang0.png");
        image = new ImageIcon(inputStream);
        liuLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/shao_kahn/shao0.png");
        image = new ImageIcon(inputStream);
        shaoLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/baraka/baraka0.png");
        image = new ImageIcon(inputStream);
        barakaLbl.setIcon(image);
    }//GEN-LAST:event_subLblMouseMoved

    private void barakaLblMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barakaLblMouseMoved
        URL inputStream = this.getClass().getResource("/characters/sonya_blade/sonya0.png");
        ImageIcon image = new ImageIcon(inputStream);
        sonyaLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/sub_zero/subzero0.png");
        image = new ImageIcon(inputStream);
        subLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/liu_kang/liukang0.png");
        image = new ImageIcon(inputStream);
        liuLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/shao_kahn/shao0.png");
        image = new ImageIcon(inputStream);
        shaoLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/baraka/baraka1.png");
        image = new ImageIcon(inputStream);
        barakaLbl.setIcon(image);
    }//GEN-LAST:event_barakaLblMouseMoved

    private void liuLblMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_liuLblMouseMoved
        URL inputStream = this.getClass().getResource("/characters/sonya_blade/sonya0.png");
        ImageIcon image = new ImageIcon(inputStream);
        sonyaLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/sub_zero/subzero0.png");
        image = new ImageIcon(inputStream);
        subLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/liu_kang/liukang1.png");
        image = new ImageIcon(inputStream);
        liuLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/shao_kahn/shao0.png");
        image = new ImageIcon(inputStream);
        shaoLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/baraka/baraka0.png");
        image = new ImageIcon(inputStream);
        barakaLbl.setIcon(image);
    }//GEN-LAST:event_liuLblMouseMoved

    private void chooseBackgroundMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chooseBackgroundMouseMoved
        URL inputStream = this.getClass().getResource("/characters/sonya_blade/sonya0.png");
        ImageIcon image = new ImageIcon(inputStream);
        sonyaLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/sub_zero/subzero0.png");
        image = new ImageIcon(inputStream);
        subLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/liu_kang/liukang0.png");
        image = new ImageIcon(inputStream);
        liuLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/shao_kahn/shao0.png");
        image = new ImageIcon(inputStream);
        shaoLbl.setIcon(image);
        inputStream = this.getClass().getResource("/characters/baraka/baraka0.png");
        image = new ImageIcon(inputStream);
        barakaLbl.setIcon(image);
        backToMenuBtn.setForeground(Color.white);
        upBtn.setForeground(Color.white);
        dwnBtn.setForeground(Color.white);
    }//GEN-LAST:event_chooseBackgroundMouseMoved

    private void backToMenuBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backToMenuBtnMouseMoved
        backToMenuBtn.setForeground(new Color(100,100,100));
    }//GEN-LAST:event_backToMenuBtnMouseMoved

    private void sonyaLblMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sonyaLblMouseDragged
        mainFrame.setVisible(true);
        chooseFighterDialog.setVisible(false);
    }//GEN-LAST:event_sonyaLblMouseDragged

    private void backToMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToMenuBtnActionPerformed
        chooseFighterDialog.setVisible(false);
    }//GEN-LAST:event_backToMenuBtnActionPerformed

    private void subLblMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subLblMouseDragged

        
    }//GEN-LAST:event_subLblMouseDragged

    private void barakaLblMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barakaLblMouseDragged

        chooseFighterDialog.setVisible(false);
    }//GEN-LAST:event_barakaLblMouseDragged

    private void liuLblMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_liuLblMouseDragged

        chooseFighterDialog.setVisible(false);
    }//GEN-LAST:event_liuLblMouseDragged

    private void sonyaLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sonyaLblMouseClicked
        
        chooseFighterDialog.setVisible(false);
        startDrawingGame(Fighters.SONYA_BLADE);
        
    }//GEN-LAST:event_sonyaLblMouseClicked

    private void shaoLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shaoLblMouseClicked

        
        chooseFighterDialog.setVisible(false);
        startDrawingGame(Fighters.SHAO_KAHN);
    }//GEN-LAST:event_shaoLblMouseClicked

    private void subLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subLblMouseClicked

        chooseFighterDialog.setVisible(false);
        startDrawingGame(Fighters.SUB_ZERO);
    }//GEN-LAST:event_subLblMouseClicked

    private void barakaLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_barakaLblMouseClicked

        chooseFighterDialog.setVisible(false);
        startDrawingGame(Fighters.BARAKA);
    }//GEN-LAST:event_barakaLblMouseClicked

    private void liuLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_liuLblMouseClicked

       chooseFighterDialog.setVisible(false);
       startDrawingGame(Fighters.LIU_KANG);
    }//GEN-LAST:event_liuLblMouseClicked

    private void defendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defendBtnActionPerformed
        if(player.getFighter().getState() == Action.STUNNED) {
            String roundInfo = game.getMoveManager().manageMoves(Action.STUNNED);
            completeRound(roundInfo, Action.STUNNED);
            player.getFighter().setState(Action.ATTACK);
        }
        else {
            String roundInfo = game.getMoveManager().manageMoves(Action.DEFEND);
            completeRound(roundInfo, Action.DEFEND);
        }
        
        
    }//GEN-LAST:event_defendBtnActionPerformed

    private void dwnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dwnBtnActionPerformed
        if(Integer.parseInt(locationsNumber.getText()) > 1)
        locationsNumber.setText(String.valueOf(Integer.parseInt(locationsNumber.getText()) - 1));
    }//GEN-LAST:event_dwnBtnActionPerformed

    private void upBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_upBtnMouseMoved
        upBtn.setForeground(new Color(100,100,100));
        dwnBtn.setForeground(Color.white);
    }//GEN-LAST:event_upBtnMouseMoved

    private void dwnBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dwnBtnMouseMoved
        dwnBtn.setForeground(new Color(100,100,100));
        upBtn.setForeground(Color.white);
    }//GEN-LAST:event_dwnBtnMouseMoved

    private void upBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upBtnActionPerformed
        locationsNumber.setText(String.valueOf(Integer.parseInt(locationsNumber.getText()) + 1));
    }//GEN-LAST:event_upBtnActionPerformed

    private void atackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atackBtnActionPerformed

        if(player.getFighter().getState() == Action.STUNNED) {
            String roundInfo = game.getMoveManager().manageMoves(Action.STUNNED);
            completeRound(roundInfo, Action.STUNNED);
            player.getFighter().setState(Action.ATTACK);
        }
        else {
            String roundInfo = game.getMoveManager().manageMoves(Action.ATTACK);
            completeRound(roundInfo, Action.ATTACK);
        }
        
        
        
        
    }//GEN-LAST:event_atackBtnActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        try {
            game.getCurrentLocation().nextLevel(player);
        } catch (RuntimeException ex) {
            game.prepareLocation();
        }
        game.getMoveManager().prepareFight(game.getCurrentLocation().getFight());
        drawFight(game.getCurrentLocation().getFight());
        if (enemy.isBoss()) turnLabel.setText("BOSS FIGHT!");
        nextLevelDialog.setVisible(false);

    }//GEN-LAST:event_nextButtonActionPerformed

    private void nextButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextButtonMouseMoved
       if(nextButton.isEnabled()) nextButton.setForeground(new Color(100,100,100));
        
       if(increaseAttackBtn.isEnabled()) increaseAttackBtn.setForeground(Color.WHITE);
       if(increaseMaxHealthBtn.isEnabled()) increaseMaxHealthBtn.setForeground(Color.WHITE);
       
    }//GEN-LAST:event_nextButtonMouseMoved

    private void nextDialogBackgroundMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextDialogBackgroundMouseMoved
        
        if(nextButton.isEnabled()) nextButton.setForeground(Color.WHITE);
        if(increaseAttackBtn.isEnabled()) increaseAttackBtn.setForeground(Color.WHITE);
        if(increaseMaxHealthBtn.isEnabled()) increaseMaxHealthBtn.setForeground(Color.WHITE);
    }//GEN-LAST:event_nextDialogBackgroundMouseMoved

    private void useBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_useBtnMouseMoved
        useBtn.setForeground(new Color(100,100,100));
        
    }//GEN-LAST:event_useBtnMouseMoved

    private void inventoryBackgroundMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryBackgroundMouseMoved
        configureInventoryButtons();
    }//GEN-LAST:event_inventoryBackgroundMouseMoved

    private void configureInventoryButtons() {
        if((smallHealRadioButton.isSelected() && !player.getFighter().getBag()[0].isAvailable()) ||
        (largeHealRadioButton.isSelected() && !player.getFighter().getBag()[1].isAvailable()) ||
        (reviveRadioButton.isSelected())){
            useBtn.setForeground(new Color(100,100,100));
            useBtn.setEnabled(false);
            
        }
        else {
            useBtn.setEnabled(true);
            useBtn.setForeground(Color.WHITE);
        }

        backToFightBtn.setForeground(Color.WHITE);
    }
    
    private void inventoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryBtnActionPerformed
        inventoryDialog.setVisible(true);
    }//GEN-LAST:event_inventoryBtnActionPerformed

    private void backToFightBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backToFightBtnMouseMoved
        backToFightBtn.setForeground(new Color(100,100,100));
    }//GEN-LAST:event_backToFightBtnMouseMoved

    private void backToFightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToFightBtnActionPerformed
        inventoryDialog.setVisible(false);
        useBtn.setForeground(Color.WHITE);
        backToFightBtn.setForeground(Color.WHITE);
    }//GEN-LAST:event_backToFightBtnActionPerformed

    private void weakBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weakBtnMouseMoved
        if(weakBtn.isEnabled()){
            weakBtn.setForeground(new Color(100,100,100));
            defendBtn.setForeground(Color.WHITE);
            atackBtn.setForeground(Color.WHITE);
            inventoryBtn.setForeground(Color.WHITE);
        }
    }//GEN-LAST:event_weakBtnMouseMoved

    private void weakBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weakBtnActionPerformed
        if(player.getFighter().getState() == Action.STUNNED) {
            String roundInfo = game.getMoveManager().manageMoves(Action.STUNNED);
            completeRound(roundInfo, Action.STUNNED);
            player.getFighter().setState(Action.ATTACK);
        }
        else {
            String roundInfo = game.getMoveManager().manageMoves(Action.WEAKENING);
            completeRound(roundInfo, Action.WEAKENING);
        }
        
    }//GEN-LAST:event_weakBtnActionPerformed

    private void reviveRadioButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reviveRadioButtonMouseMoved
        configureInventoryButtons();
    }//GEN-LAST:event_reviveRadioButtonMouseMoved

    private void largeHealRadioButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_largeHealRadioButtonMouseMoved
        configureInventoryButtons();
    }//GEN-LAST:event_largeHealRadioButtonMouseMoved

    private void smallHealRadioButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_smallHealRadioButtonMouseMoved
        configureInventoryButtons();
    }//GEN-LAST:event_smallHealRadioButtonMouseMoved

    private void reviveRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reviveRadioButtonMouseClicked
        configureInventoryButtons();
    }//GEN-LAST:event_reviveRadioButtonMouseClicked

    private void largeHealRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_largeHealRadioButtonMouseClicked
        configureInventoryButtons();
    }//GEN-LAST:event_largeHealRadioButtonMouseClicked

    private void smallHealRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_smallHealRadioButtonMouseClicked
       configureInventoryButtons();
    }//GEN-LAST:event_smallHealRadioButtonMouseClicked

    private void loseGameBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loseGameBtnMouseMoved
        configureLoseDialogButtons();
        loseGameBtn.setForeground(new Color(100,100,100));
    }//GEN-LAST:event_loseGameBtnMouseMoved

    private void loseGameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loseGameBtnActionPerformed
         blockEndGameBtn();
         congratulationsDialog.setVisible(true);
         loseDialog.setVisible(false);
         congratsTitle.setText("Повезет в следующий раз.");
    }//GEN-LAST:event_loseGameBtnActionPerformed

    private void reviveBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reviveBtnMouseMoved
        configureLoseDialogButtons();
        reviveBtn.setForeground(new Color(100,100,100));
        
        
    }//GEN-LAST:event_reviveBtnMouseMoved

    private void configureLoseDialogButtons() {
        if(!player.getFighter().getBag()[2].isAvailable()) {
            reviveBtn.setEnabled(false);
            reviveBtn.setForeground(new Color(100,100,100));
        } else {
            reviveBtn.setEnabled(true);
            loseGameBtn.setForeground(Color.WHITE);
            reviveBtn.setForeground(Color.WHITE);
        }
        
    }
    
    private void reviveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reviveBtnActionPerformed
        game.getCurrentLocation().getFight().revivePlayer();
        loseDialog.setVisible(false);
        playerIcon.setIcon(player.getFighter().getSprites()[0]);
        Item[] bag = player.getFighter().getBag();
        reviveRadioButton.setText("Крест возрождения, " + bag[2].getCount() + " шт");
        turnOnActionButtons();
        moveLabel.setText("Move: " + game.getMoveManager().getCurrentMove());
        
        try {
            drawHPLabelsAndBars();
        } catch (InterruptedException ex) {
            
        }
        turnInfo.setText("ВАШ ХОД");
    }//GEN-LAST:event_reviveBtnActionPerformed

    private void loseBackgroundLblMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loseBackgroundLblMouseMoved
        configureLoseDialogButtons();
        loseGameBtn.setForeground(Color.WHITE);
    }//GEN-LAST:event_loseBackgroundLblMouseMoved

    private void increaseAttackBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_increaseAttackBtnMouseMoved
       if(increaseAttackBtn.isEnabled()) increaseAttackBtn.setForeground(new Color(100,100,100));
       if(increaseMaxHealthBtn.isEnabled()) increaseMaxHealthBtn.setForeground(Color.WHITE);
       if (nextButton.isEnabled()) nextButton.setForeground(Color.WHITE);
       
    }//GEN-LAST:event_increaseAttackBtnMouseMoved

    private void increaseAttackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseAttackBtnActionPerformed
        nextButton.setEnabled(true);
        increaseMaxHealthBtn.setEnabled(false);
        increaseAttackBtn.setEnabled(false);
        increaseAttackBtn.setFont(new Font("Consolas", Font.PLAIN, 20));
        game.increasePlayerFighterStats(true);
    }//GEN-LAST:event_increaseAttackBtnActionPerformed

    private void increaseMaxHealthBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_increaseMaxHealthBtnMouseMoved
        if(increaseMaxHealthBtn.isEnabled())increaseMaxHealthBtn.setForeground(new Color(100,100,100));
        if (nextButton.isEnabled()) nextButton.setForeground(Color.WHITE);
        if(increaseAttackBtn.isEnabled()) increaseAttackBtn.setForeground(Color.WHITE); 
        
        
    }//GEN-LAST:event_increaseMaxHealthBtnMouseMoved

    private void increaseMaxHealthBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseMaxHealthBtnActionPerformed
        nextButton.setEnabled(true);
        increaseMaxHealthBtn.setEnabled(false);
        increaseAttackBtn.setEnabled(false);
        increaseMaxHealthBtn.setFont(new Font("Consolas", Font.PLAIN, 20));
        game.increasePlayerFighterStats(false);
       
    }//GEN-LAST:event_increaseMaxHealthBtnActionPerformed

    private void writeNameTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeNameTextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_writeNameTextfieldActionPerformed

    private void endGameBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_endGameBtnMouseMoved
       endGameBtn.setForeground(new Color(100,100,100));
    }//GEN-LAST:event_endGameBtnMouseMoved

    private void endGameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endGameBtnActionPerformed
        try {
            game.endGame(writeNameTextfield.getText());
            mainFrame.setVisible(false);
            congratulationsDialog.setVisible(false);
            writeNameTextfield.setText("");
            
        } catch (IOException ex) {
            
        }
    }//GEN-LAST:event_endGameBtnActionPerformed

    private void congratulationsBackgroundMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_congratulationsBackgroundMouseMoved
        blockEndGameBtn();
    }//GEN-LAST:event_congratulationsBackgroundMouseMoved

    private void writeNameTextfieldMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writeNameTextfieldMouseMoved
         blockEndGameBtn();
    }//GEN-LAST:event_writeNameTextfieldMouseMoved

    private void writeNameLabelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writeNameLabelMouseMoved
        blockEndGameBtn();
    }//GEN-LAST:event_writeNameLabelMouseMoved

    private void resultToTableLabelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultToTableLabelMouseMoved
         blockEndGameBtn();
    }//GEN-LAST:event_resultToTableLabelMouseMoved

    private void congratsTitleMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_congratsTitleMouseMoved
         blockEndGameBtn();
    }//GEN-LAST:event_congratsTitleMouseMoved

    private void closeTableBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeTableBtnMouseMoved
        closeTableBtn.setForeground(new Color(100,100,100));
    }//GEN-LAST:event_closeTableBtnMouseMoved

    private void closeTableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeTableBtnActionPerformed
        winnersTableDialog.setVisible(false);
    }//GEN-LAST:event_closeTableBtnActionPerformed

    private void tableBackgroundMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableBackgroundMouseMoved
        closeTableBtn.setForeground(Color.WHITE);
    }//GEN-LAST:event_tableBackgroundMouseMoved
    
    
    
    private void turnOffActionButtons() {
        atackBtn.setEnabled(false);
        defendBtn.setEnabled(false);
        inventoryBtn.setEnabled(false);
        weakBtn.setEnabled(false);

        defendBtn.setForeground(new Color(100,100,100));
        atackBtn.setForeground(new Color(100,100,100));
        inventoryBtn.setForeground(new Color(100,100,100));
        weakBtn.setForeground(new Color(100,100,100));
    }
    
    private void turnOnActionButtons() {
        atackBtn.setEnabled(true);
        defendBtn.setEnabled(true);
        inventoryBtn.setEnabled(true);
        weakBtn.setEnabled(true);
        
        atackBtn.setForeground(Color.WHITE);
        defendBtn.setForeground(Color.WHITE);
        inventoryBtn.setForeground(Color.WHITE);
        weakBtn.setForeground(Color.WHITE);
    }
    
    private void drawCurrentAction(Action playersAction, Action enemysAction){
        if(playersAction == Action.ATTACK) playerIcon.setIcon(player.getFighter().getSprites()[1]);
        if(playersAction == Action.DEFEND) playerIcon.setIcon(player.getFighter().getSprites()[2]);
        if(playersAction == Action.STUNNED) playerIcon.setIcon(player.getFighter().getSprites()[3]);


        if(enemysAction == Action.ATTACK) enemyIcon.setIcon(enemy.getSprites()[1]);
        if(enemysAction == Action.DEFEND) enemyIcon.setIcon(enemy.getSprites()[2]);
        if(enemysAction == Action.STUNNED) enemyIcon.setIcon(enemy.getSprites()[3]);
    };
    
    private void drawCurrentState() {
        if (enemy.getState() == Action.STUNNED  ||
            enemy.getHealth() <= 0) {
            enemyIcon.setIcon(enemy.getSprites()[3]);} 
        else {
            enemyIcon.setIcon(enemy.getSprites()[0]);
            if(game.getMoveManager().getCurrentMove() % 2 == 0) turnInfo.setText("ХОД СОПЕРНИКА");
        }

        if (player.getFighter().getState() == Action.STUNNED ||
            player.getFighter().getHealth() <=0) {
            playerIcon.setIcon(player.getFighter().getSprites()[3]);
        } else {
            playerIcon.setIcon(player.getFighter().getSprites()[0]);

        }
    }
    
    private Thread prepareHPAnimationThread(Fighter fighter) {
        Thread thread = new Thread() {
            @Override
            public void run() {
                JLabel hpLbl;
                JProgressBar HPBar;
                if(fighter.isPlayer()) {
                    hpLbl = hpPlayerLbl;
                    HPBar = playerHPBar;
                } else {
                    hpLbl = hpEnemyLbl;
                    HPBar = enemyHPBar;
                }
                
                int newHealth = (int) fighter.getHealth();
                int currentHealth = (int)Double.parseDouble(hpLbl.getText().substring(4, hpLbl.getText().length()));
                int maxHealth = (int) fighter.getMaxHealth();
                int diff = -1; 
                int speed = 30;
                if (newHealth > currentHealth) diff = 1;
                
                while(true) {
                    if(HPBar.getValue() == (newHealth*100)/maxHealth && currentHealth == newHealth){
                        break;
                    }  
                    if(HPBar.getValue() != (newHealth*100)/maxHealth) HPBar.setValue(HPBar.getValue()+diff);
                    if(currentHealth != newHealth) hpLbl.setText("HP: " + String.valueOf(currentHealth+diff));
                    
                    currentHealth = Integer.parseInt(hpLbl.getText().substring(4, hpLbl.getText().length()));
                    try {
                        
                        Thread.sleep(speed);
                    } catch (InterruptedException ex) {
                       
                    }
                }
        
            }
        };
        return thread;
    }
    
    private void drawHPLabelsAndBars() throws InterruptedException {
        Thread firstHPAnimationThread = prepareHPAnimationThread(player.getFighter());
        Thread secondHPAnimationThread = prepareHPAnimationThread(enemy);
        firstHPAnimationThread.start();
        secondHPAnimationThread.start();
        
        }
    
    private Boolean recogniseTheWinner() throws InterruptedException {
        if(enemy.getHealth() <= 0){
            turnInfo.setText("PLAYER WINS");
            return true;
        }
        else if(player.getFighter().getHealth() <= 0){
            turnInfo.setText("PLAYER LOSES");
            return true;
        }
        return false;
    }
    
    private void updatePlayerIndicators() {
        expPlayerLabel.setText("EXP: " + player.getExperience());
        pointsLabel.setText("POINTS: " + player.getPoints());
    }
    
    
    private void completeRound(String roundInfo, Action playersAction) {
        
        Action enemysAction = game.getMoveManager().getEnemysAction();
        
        Thread roundThread = new Thread() {
            @Override
            public void run(){
                try {
                    turnOffActionButtons();
                    Thread.sleep(700);
                    turnLabel.setText(roundInfo);
                    drawCurrentAction(playersAction, enemysAction);
                    drawHPLabelsAndBars();
                    Thread.sleep(1700);
                    drawCurrentState();
                    Boolean isRoundEnded = recogniseTheWinner();
                    Thread.sleep(3000);
                    if (enemy.getHealth() != 0 && player.getFighter().getHealth() != 0) {
                        turnOnActionButtons();
                        moveLabel.setText("Move: " + game.getMoveManager().getCurrentMove());
                    }
                    endRound(isRoundEnded);
                    
                    
                } catch (InterruptedException ex) {
                    
                }
            }        
        };
        
        roundThread.start();
        
    }
    
    private void endRound(Boolean isRoundEnded) {
        if (!isRoundEnded) turnInfo.setText("ВАШ ХОД");
            if (enemyHPBar.getValue() <= 0) {
                turnLabel.setText(game.getCurrentLocation().getFight().getRandomItem());
                game.getCurrentLocation().finishLevel(player);
                updatePlayerIndicators();
                try {
                    Thread.sleep(700);
                } catch (InterruptedException ex) {
                }
                if(game.getCurrentLocation().isLastLevel() && game.isLocationLast()){
                    blockEndGameBtn();
                    congratsTitle.setText("Победа на вашей стороне.");
                    congratulationsDialog.setVisible(true);
                } else {
                    game.getCurrentLocation().finishLevel(player);
                    String oldLvlLabel = heroLevel.getText();
                    heroLevel.setText("LVL: " + player.getFighter().getLevel());
                    if(!oldLvlLabel.equals(heroLevel.getText())){
                        drawLevelUPOptions();
                    }
                    nextLevelDialog.setVisible(true);

                }


            } else if (playerHPBar.getValue() <= 0) {
                loseDialog.setVisible(true);

            }
    }
    
    private void drawLevelUPOptions() {
        increaseAttackBtn.setEnabled(true);
        increaseMaxHealthBtn.setEnabled(true);
        increaseAttackBtn.setVisible(true);
        increaseMaxHealthBtn.setVisible(true);
        reachedNewLevelLbl.setVisible(true);
        nextButton.setEnabled(false);
        
        
        
    }
    
    private void startDrawingGame(Fighters character) {
        
        game.startNewGame(character);
        game.setLocationsNumber(Integer.parseInt(locationsNumber.getText()));
        
        Location location;
        
        mainFrame.setVisible(true);
        mainFrame.setLocationRelativeTo(null);
        location = game.prepareLocation();
        
        game.getMoveManager().prepareFight(location.getFight());

        drawFight(location.getFight());
        
        
    }
    
    private void drawFight(Fight fight) {
        player = fight.getPlayer();
        enemy = fight.getEnemy();
        playerIcon.setIcon(player.getFighter().getSprites()[0]);
        enemyIcon.setIcon(enemy.getSprites()[0]);
       
        playerHPBar.setValue(100);
        enemyHPBar.setValue(100);
        hideButtons();      
        updateLabels();
        turnOnActionButtons();
        
        
        
                
        
        
    }
    
    private void updateLabels() {
        reachedNewLevelLbl.setVisible(false);
        heroName.setText(player.getFighter().getName());
        enemyName.setText(enemy.getName());
        enemyLevel.setText("LVL: " + String.valueOf(enemy.getLevel()));
        turnLabel.setText("УДАЧИ!");
        heroLevel.setText("LVL: " + player.getFighter().getLevel());
        hpPlayerLbl.setText("HP: " + player.getFighter().getMaxHealth());
        hpEnemyLbl.setText("HP: " + enemy.getMaxHealth());
        expPlayerLabel.setText("EXP: " + player.getExperience());
        pointsLabel.setText("POINTS: " + player.getPoints());
        stageLbl.setText("Stage: " + game.getCurrentStage());
        levelLbl.setText("LEVEL: " + game.getCurrentLocation().getCurrentLevel());
        Item[] bag = player.getFighter().getBag();
        smallHealRadioButton.setText("Малое зелье лечения, " + bag[0].getCount() + " шт");
        largeHealRadioButton.setText("Большое зелье лечения, " + bag[1].getCount() + " шт");
        reviveRadioButton.setText("Крест возрождения, " + bag[2].getCount() + " шт");
        moveLabel.setText("Move: " + 1);
    }
    
    private void hideButtons() {
        increaseAttackBtn.setEnabled(false);
        increaseMaxHealthBtn.setEnabled(false);
        increaseAttackBtn.setVisible(false);
        increaseMaxHealthBtn.setVisible(false);
        if(player.getFighter().getType() == WIZARD) weakBtn.setVisible(true);
    }

    private void blockEndGameBtn() {
        if (writeNameTextfield.getText().equals("")) {
            endGameBtn.setEnabled(false);
            endGameBtn.setForeground(new Color(100,100,100));
        }
        else {
            endGameBtn.setEnabled(true);
            endGameBtn.setForeground(Color.WHITE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton atackBtn;
    private javax.swing.JButton backToFightBtn;
    private javax.swing.JButton backToMenuBtn;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JLabel barakaLbl;
    private javax.swing.ButtonGroup btnGroup;
    private javax.swing.JLabel chooseBackground;
    private javax.swing.JDialog chooseFighterDialog;
    private javax.swing.JLabel chooseTitleLabel;
    private javax.swing.JButton closeTableBtn;
    private javax.swing.JLabel congratsTitle;
    private javax.swing.JLabel congratulationsBackground;
    private javax.swing.JDialog congratulationsDialog;
    private javax.swing.JLabel deadLbl;
    private javax.swing.JButton defendBtn;
    private javax.swing.JButton dwnBtn;
    private javax.swing.JButton endGameBtn;
    private javax.swing.JProgressBar enemyHPBar;
    private javax.swing.JProgressBar enemyHPBarBackground;
    private javax.swing.JLabel enemyIcon;
    private javax.swing.JLabel enemyLevel;
    private javax.swing.JLabel enemyName;
    private javax.swing.JLabel expPlayerLabel;
    private javax.swing.JLabel fightLabel;
    private javax.swing.JLabel heroLevel;
    private javax.swing.JLabel heroName;
    private javax.swing.JLabel hpEnemyLbl;
    private javax.swing.JLabel hpPlayerLbl;
    private javax.swing.JButton increaseAttackBtn;
    private javax.swing.JButton increaseMaxHealthBtn;
    private javax.swing.JLabel inventoryBackground;
    private javax.swing.JButton inventoryBtn;
    private javax.swing.JDialog inventoryDialog;
    private javax.swing.JLabel inventoryLabel;
    private javax.swing.JRadioButton largeHealRadioButton;
    private javax.swing.JLabel levelLbl;
    private javax.swing.JLabel liuLbl;
    private javax.swing.JLabel locationsNumber;
    private javax.swing.JLabel loseBackgroundLbl;
    private javax.swing.JDialog loseDialog;
    private javax.swing.JButton loseGameBtn;
    private javax.swing.JFrame mainFrame;
    private javax.swing.JLabel mainMenuBackground;
    private javax.swing.JLabel moveLabel;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel nextDialogBackground;
    private javax.swing.JDialog nextLevelDialog;
    private javax.swing.JProgressBar playerHPBar;
    private javax.swing.JProgressBar playerHPBarBackground;
    private javax.swing.JLabel playerIcon;
    private javax.swing.JLabel pointsLabel;
    private javax.swing.JLabel reachedNewLevelLbl;
    private javax.swing.JLabel resultToTableLabel;
    private javax.swing.JButton reviveBtn;
    private javax.swing.JRadioButton reviveRadioButton;
    private javax.swing.JLabel shaoLbl;
    private javax.swing.JButton showResultTableBtn;
    private javax.swing.JRadioButton smallHealRadioButton;
    private javax.swing.JLabel sonyaLbl;
    private javax.swing.JLabel stageLbl;
    private javax.swing.JButton startNewGameBtn;
    private javax.swing.JLabel subLbl;
    private javax.swing.JLabel tableBackground;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel turnInfo;
    private javax.swing.JLabel turnLabel;
    private javax.swing.JButton upBtn;
    private javax.swing.JButton useBtn;
    private javax.swing.JButton weakBtn;
    private javax.swing.JTable winnersTable;
    private javax.swing.JDialog winnersTableDialog;
    private javax.swing.JLabel winnersTableLabel1;
    private javax.swing.JScrollPane winnersTableScrollPane;
    private javax.swing.JLabel writeNameLabel;
    private javax.swing.JTextField writeNameTextfield;
    private javax.swing.JLabel youWinDLbl;
    // End of variables declaration//GEN-END:variables
}
